This workshop will teach how to start the debugger, control the program flow, and inspect its internal state.

This workshop assumes a basic knowledge of using Python interactive shell. Participants are welcome to bring laptops and follow along

* improve
---
What do you do when you see an exception stacktrace? Unless it's an obvious error, you examine the runtime state that caused it. Many developers do that with print and logging, which is fine for simple cases but gets increasingly complex with more moving parts involved. Fortunately, Python comes with a built-in debugger, a tool that lets you pause a running program, read and change its state, and control the execution flow. This workshop is a solid hands-on on (i)pdb in Python 3 that will help you to fix the bugs faster by having a shorter feedback loop for testing bug origin theories. In this workshop we will go through exercises on launching the debugger, inspecting the state of a running program, and controlling its execution.

---
Notes on existing abstracts:

v Foo is a bar, and does baz.
v Rhetorical question 
x Second person, referring to self
v This is where Foo shines
~ What I will do in this talk
v Foo does baz
~ 3 questions akin to HSAC!WDTK?DTKT??LFO!
- Observation
- This talk will present
- The talk presents Foo and introduces Bar
- In this talk, we are going to ...
v States problem as a fact of life
x Declares the speaker in 3rd person
- This talk gives an overview
- "that make you"
- An overview of talk "finishes up with..."
- I will foo, I will bar
- Nowadays, with foo and bar, more and more people...
- Foo in bar has been ..., but baz is not enough 
- This session will be introduction to foo
- State the problem as the first sentence  
- This talk will cover foo, a bar.
- We will do foo and bar
- Good news first sentence problem resolution, aka "We're gonna die! Unless.."
- We'll cover
- foo will help *you*
---
Timofei Tipishev, software developer at Sportamore.
